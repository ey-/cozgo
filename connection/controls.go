package connection

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"log"
	"os"

	"github.com/ey-/cozgo/messagetypes"
)

func ToLeft(c *Connection) {
	buf := &bytes.Buffer{}
	c.Messages.FromUs = c.Messages.FromUs + uint16(1)
	header := c.Messages.BuildHeader(0x07, uint16(1))
	messageBuffer := &bytes.Buffer{}
	binary.Write(messageBuffer, binary.LittleEndian, header)
	binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x0b, 0x00, 0x33, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff})
	toLeftMessage := messagetypes.Packet(messageBuffer.Bytes())

	err := binary.Write(buf, binary.LittleEndian, toLeftMessage.Bytes())
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	go c.Send(buf)
}

func ToForward(c *Connection) {
	buf := &bytes.Buffer{}
	c.Messages.FromUs = c.Messages.FromUs + uint16(1)
	header := c.Messages.BuildHeader(0x07, uint16(1))
	messageBuffer := &bytes.Buffer{}
	m8f := []byte{0x04, 0x01, 0x00, 0x8f}
	binary.Write(messageBuffer, binary.LittleEndian, header)
	//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x11, 0x00, 0x32, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x05, 0x00, 0x99, 0x0ff, 0x0ff, 0x0ff, 0x0ff})
	//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x02, 0x00, 0x9e, 0x04})

	binary.Write(messageBuffer, binary.LittleEndian, m8f)
	message := messagetypes.Packet(messageBuffer.Bytes())

	err := binary.Write(buf, binary.LittleEndian, message.Bytes())
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	go c.Send(buf)
}

func LiftUp(c *Connection, up bool) {
	buf := &bytes.Buffer{}
	c.Messages.FromUs = c.Messages.FromUs + uint16(1)
	header := c.Messages.BuildHeader(0x07, uint16(1))
	messageBuffer := &bytes.Buffer{}
	m8f := []byte{0x04, 0x01, 0x00, 0x8f}
	binary.Write(messageBuffer, binary.LittleEndian, header)
	binary.Write(messageBuffer, binary.LittleEndian, m8f)
	if up {
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x04, 0x00, 0x94, 0x00, 0x10, 0x80})
	} else {
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x04, 0x00, 0x94, 0x00, 0xf0, 0x20})
	}

	toLeftMessage := messagetypes.Packet(messageBuffer.Bytes())

	err := binary.Write(buf, binary.LittleEndian, toLeftMessage.Bytes())
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	go c.Send(buf)
}

func ActivateStream(c *Connection) {
	fmt.Println("Activate Stream")
	buf := &bytes.Buffer{}
	// 64ffff
	messageOne := []byte("\x04\x03\x00\x64\xff\xff")
	// 8001000000
	messageTwo := []byte("\x04\x05\x00\x80\x01\x00\x00\x00")
	// 5700000040100000
	messageThree := []byte("\x04\x08\x00\x57\x00\x00\x00\x40\x10\x00\x00")

	c.Messages.FromUs = c.Messages.FromUs + uint16(1)
	header := c.Messages.BuildHeader(0x07, uint16(2))

	messageBuffer := &bytes.Buffer{}
	binary.Write(messageBuffer, binary.LittleEndian, header)
	binary.Write(messageBuffer, binary.LittleEndian, messageOne)
	binary.Write(messageBuffer, binary.LittleEndian, messageTwo)
	binary.Write(messageBuffer, binary.LittleEndian, messageThree)
	mess := messagetypes.Packet(messageBuffer.Bytes())

	err := binary.Write(buf, binary.LittleEndian, mess.Bytes())
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	go c.Send(buf)
}

func DriveWheels(c *Connection, leftWheelSpeed float32, rightWheelSpeed float32, leftWheelAcceleration float32, rightWheelAcceleration float32) {
	buf := &bytes.Buffer{}
	c.Messages.FromUs = c.Messages.FromUs + uint16(1)
	header := c.Messages.BuildHeader(0x07, uint16(1))
	messageBuffer := &bytes.Buffer{}
	binary.Write(messageBuffer, binary.LittleEndian, header)
	command := &bytes.Buffer{}
	binary.Write(command, binary.LittleEndian, []byte{0x32})
	binary.Write(command, binary.LittleEndian, leftWheelSpeed)
	binary.Write(command, binary.LittleEndian, rightWheelSpeed)
	binary.Write(command, binary.LittleEndian, leftWheelAcceleration)
	binary.Write(command, binary.LittleEndian, rightWheelAcceleration)
	//length := binary.Size(command)
	for i := 0; i < 1; i++ {
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04})
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x11, 0x00})
		binary.Write(messageBuffer, binary.LittleEndian, command.Bytes())
	}
	message := messagetypes.Packet(messageBuffer.Bytes())

	err := binary.Write(buf, binary.LittleEndian, message.Bytes())
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	enco := hex.EncodeToString(buf.Bytes())
	fmt.Println("\n", enco)
	go c.Send(buf)
}

func MoveLift(c *Connection, speedRadPerSecond float32) {
	buf := &bytes.Buffer{}
	c.Messages.FromUs = c.Messages.FromUs + uint16(1)
	header := c.Messages.BuildHeader(0x07, uint16(1))
	messageBuffer := &bytes.Buffer{}
	binary.Write(messageBuffer, binary.LittleEndian, header)
	command := &bytes.Buffer{}
	binary.Write(command, binary.LittleEndian, []byte{0x34})
	binary.Write(command, binary.LittleEndian, speedRadPerSecond)

	//length := binary.Size(command)
	for i := 0; i < 1; i++ {
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04})
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x05, 0x00})
		binary.Write(messageBuffer, binary.LittleEndian, command.Bytes())
	}
	message := messagetypes.Packet(messageBuffer.Bytes())

	err := binary.Write(buf, binary.LittleEndian, message.Bytes())
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	enco := hex.EncodeToString(buf.Bytes())
	fmt.Println("\n", enco)
	go c.Send(buf)
}

func MoveHead(c *Connection, speedRadPerSecond float32) {
	buf := &bytes.Buffer{}
	c.Messages.FromUs = c.Messages.FromUs + uint16(1)
	header := c.Messages.BuildHeader(0x07, uint16(1))
	messageBuffer := &bytes.Buffer{}
	binary.Write(messageBuffer, binary.LittleEndian, header)
	command := &bytes.Buffer{}
	binary.Write(command, binary.LittleEndian, []byte{0x35})
	binary.Write(command, binary.LittleEndian, speedRadPerSecond)

	//length := binary.Size(command)
	for i := 0; i < 1; i++ {
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04})
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x05, 0x00})
		binary.Write(messageBuffer, binary.LittleEndian, command.Bytes())
	}
	message := messagetypes.Packet(messageBuffer.Bytes())

	err := binary.Write(buf, binary.LittleEndian, message.Bytes())
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	enco := hex.EncodeToString(buf.Bytes())
	fmt.Println("\n", enco)
	go c.Send(buf)
}

func toLeftOld(c *Connection) {

	buf := &bytes.Buffer{}
	m8f := []byte{0x04, 0x01, 0x00, 0x8f}
	//firstGesicht := []byte("\x04\x22\x00\x97\x01\x00\x16\xa4\xb1\xa0\xa0\xb9\x41\x9c\xc1\x5c\xa0\xb9\x40\xa4\xb1\x06\xa4\xb1\x40\xa0\xb9\x40\x9c\xc1\x5d\xa0\xb9\x40\xa4\xb1\x16")
	//firstGesicht := []byte{0x04,0x22,0x00, 0x97, 0x1f, 0x00, 0x13, 0xa0, 0xb6, 0x40, 0x9c, 0xbe, 0x9c, 0x98, 0xc6, 0x5d, 0x9c, 0xbe, 0x40, 0xa0, 0xb6, 0x05, 0xa4, 0xae, 0x40, 0xa0, 0xb6, 0xa0, 0x9c, 0xbe, 0x5d, 0xa0, 0xb6, 0x40, 0xa4, 0xae, 0x1b}
	//secondGesicht := []byte{0x04,0x22,0x00, 0x97, 0x1f, 0x00, 0x13, 0xa4, 0xb2, 0xa0, 0xa0, 0xba, 0x40, 0x9c, 0xc2, 0x5e, 0xa0, 0xba, 0x40, 0xa4, 0xb2, 0x03, 0xa8, 0xaa, 0x40, 0xa4, 0xb2, 0x40, 0xa0, 0xba, 0x5d, 0xa4, 0xb2, 0x40, 0xa8, 0xaa, 0x1b}
	//thirdGesicht := []byte{0x04, 0x24, 0x00, 0x97, 0x21, 0x00, 0x12, 0xa8, 0xb2, 0x41, 0xa4, 0xba, 0x98, 0xa0, 0xc2, 0x5c, 0xa4, 0xba, 0x40, 0xa8, 0xb2, 0x40, 0x03, 0xac, 0xaa, 0x40, 0xa8, 0xb2, 0x41, 0xa4, 0xba, 0x5b, 0xa8, 0xb2, 0x40, 0xac, 0xaa, 0x40, 0x1c}
	fourth := []byte{0x04, 0x29, 0x00, 0x97, 0x26, 0x00, 0x1a, 0xa0, 0xad, 0xa8, 0x9c, 0xb5, 0x40, 0x98, 0xbd, 0x40, 0x98, 0xc1, 0x5b, 0x98, 0xbd, 0xa0, 0x9c, 0xb5, 0x40, 0x06, 0x9c, 0xb5, 0xa4, 0x98, 0xbd, 0x40, 0x94, 0xc5, 0x9c, 0x90, 0xcd, 0x5d, 0x94, 0xc5, 0x40, 0x98, 0xbd, 0x12}
	//toLeft := []byte("\x04\x01\x00\x8f\x04\x22\x00\x97\x01\x00\x16\xa4\xb1\xa0\xa0\xb9\x41\x9c\xc1\x5c\xa0\xb9\x40\xa4\xb1\x06\xa4\xb1\x40\xa0\xb9\x40\x9c\xc1\x5d\xa0\xb9\x40\xa4\xb1\x16")
	//toLeft := []byte("\x04\x01\x00\x8f\x04\x22\x00\x97\x01\x00\x16\xa4\xb1\xa0\xa0\xb9\x41\x9c\xc1\x5c\xa0\xb9\x40\xa4\xb1\x06\xa4\xb1\x40\xa0\xb9\x40\x9c\xc1\x5d\xa0\xb9\x40\xa4\xb1\x16")
	//toLeft := []byte("x04\x01\x00\x8f\x04\x23\x00\x97\x20\x00\x13\xa0\xad\xa8\x9c\xb5\x41\x98\xbd\x5e\x9c\xb5\x40\xa0\xad\x05\xa0\xad\x40\x9c\xb5\x40\x98\xbd\x5d\x9c\xb5\x40\xa0\xad\x40\x17\x04\x01\x00\x8f\x04\x1a\x00\x97\x17\x00\x10\xa8\x9d\xb0\xa4\xa5\x41\xa0\xad\x64\xa4\xa5\x41\xa8\x9d\x40\xa4\xa5\x67\xa8\x9d\x40\x14")
	//toLeft := []byte("\x04\x01\x00\x8f\x04\x0d\x00\x81\x00\x20\x18\x00\x00\x04\x00\x00\x00\x00\x00\x00")
	audio := []byte{0x04, 0xe9, 0x02, 0x8e, 0x15, 0x87, 0x09, 0x0b, 0x00, 0x0d, 0x9e, 0x20, 0x98, 0x07, 0x08, 0x8c, 0x25, 0x94, 0x27, 0x0b, 0x8b, 0x0f, 0x8f, 0x0c, 0x11, 0x93, 0x82, 0x8a, 0x99, 0x88, 0x97, 0xa3, 0x80, 0xa4, 0x13, 0x8d, 0x83, 0x01, 0x87, 0x04, 0x12, 0x0c, 0x01, 0x25, 0xa2, 0x22, 0x07, 0x95, 0x25, 0xb1, 0x29, 0x89, 0x20, 0x22, 0x92, 0x2e, 0xa4, 0x25, 0x96, 0x8a, 0x8a, 0xa7, 0x1c, 0xa3, 0x30, 0x87, 0x16, 0x16, 0x8b, 0x1f, 0xab, 0x01, 0xab, 0x9d, 0x89, 0xa8, 0x1c, 0xa5, 0x95, 0x02, 0x8e, 0x24, 0x9a, 0x21, 0x8f, 0x81, 0x06, 0x80, 0x98, 0x80, 0x86, 0x89, 0x0e, 0x81, 0x05, 0x81, 0x87, 0x1c, 0x06, 0x18, 0x0b, 0x0a, 0x01, 0x20, 0x8b, 0x23, 0x90, 0x00, 0x26, 0xa7, 0x30, 0x98, 0x89, 0x21, 0x85, 0x2c, 0x12, 0x23, 0x17, 0x85, 0x05, 0x8c, 0x93, 0xa7, 0x8f, 0xaa, 0x01, 0x87, 0xaa, 0x0b, 0xaf, 0x86, 0x04, 0xa5, 0x23, 0xa5, 0x0d, 0x08, 0x94, 0x0f, 0x91, 0x8a, 0x00, 0x01, 0x15, 0x04, 0x0f, 0x02, 0x08, 0x04, 0x11, 0x81, 0x07, 0x14, 0x83, 0x1b, 0x88, 0x05, 0x9c, 0x91, 0x03, 0xa2, 0x19, 0x86, 0x8a, 0x17, 0x06, 0x08, 0x9d, 0x26, 0xa5, 0x1f, 0x0c, 0x07, 0x22, 0x87, 0x81, 0x1d, 0xa5, 0x25, 0x8d, 0x18, 0x0d, 0x8d, 0x18, 0x91, 0x93, 0x08, 0xae, 0x14, 0x95, 0x8a, 0x17, 0x9d, 0x14, 0x8f, 0x9d, 0x10, 0xa0, 0x86, 0x0a, 0x96, 0x29, 0xa7, 0x24, 0x82, 0x86, 0x12, 0x06, 0x94, 0x2b, 0xa9, 0x2b, 0xa6, 0x0f, 0x82, 0x92, 0x08, 0x1a, 0x9e, 0x2b, 0xad, 0x24, 0xa7, 0x8c, 0x84, 0x9b, 0x8e, 0x23, 0xa5, 0x2b, 0x97, 0x20, 0x01, 0x8d, 0x19, 0x86, 0x89, 0x26, 0x9b, 0x2a, 0x8c, 0x1d, 0x14, 0x8c, 0x14, 0x85, 0x94, 0x1e, 0xa7, 0x12, 0x8f, 0x8c, 0x0b, 0xa2, 0x06, 0x85, 0xa6, 0x10, 0xa3, 0x84, 0x88, 0xa9, 0x1f, 0xa8, 0x08, 0x0b, 0x8e, 0x20, 0x0d, 0x02, 0x26, 0xa5, 0x2c, 0xa7, 0x16, 0x0e, 0x08, 0x14, 0x25, 0x8a, 0x30, 0xac, 0x2c, 0x9b, 0x83, 0x0f, 0x00, 0x94, 0x25, 0xa8, 0x25, 0xa8, 0x0a, 0x91, 0x97, 0x82, 0x85, 0x9f, 0x20, 0xa7, 0x24, 0xa4, 0x0b, 0x09, 0x8c, 0x09, 0x08, 0xa0, 0x1c, 0xa0, 0x0d, 0x8f, 0x83, 0x06, 0x85, 0x83, 0x02, 0x87, 0x09, 0x84, 0x05, 0x00, 0x00, 0x0b, 0x07, 0x0b, 0x0d, 0x0a, 0x0d, 0x0a, 0x03, 0x04, 0x00, 0x85, 0x85, 0x88, 0x83, 0x00, 0x02, 0x06, 0x08, 0x03, 0x80, 0x8a, 0x8d, 0x8b, 0x8b, 0x88, 0x85, 0x84, 0x02, 0x00, 0x00, 0x81, 0x81, 0x82, 0x00, 0x84, 0x02, 0x04, 0x06, 0x08, 0x0b, 0x0a, 0x0a, 0x05, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01, 0x03, 0x02, 0x06, 0x03, 0x03, 0x00, 0x82, 0x89, 0x88, 0x8b, 0x87, 0x85, 0x83, 0x85, 0x80, 0x89, 0x89, 0x8b, 0x8c, 0x8e, 0x8b, 0x8b, 0x89, 0x84, 0x84, 0x81, 0x04, 0x06, 0x04, 0x03, 0x03, 0x02, 0x04, 0x03, 0x02, 0x06, 0x05, 0x06, 0x0a, 0x0b, 0x0c, 0x0e, 0x0a, 0x08, 0x06, 0x06, 0x05, 0x07, 0x07, 0x0d, 0x0f, 0x0e, 0x0d, 0x0c, 0x07, 0x04, 0x81, 0x86, 0x89, 0x8b, 0x8d, 0x8a, 0x8a, 0x8c, 0x8b, 0x8d, 0x91, 0x94, 0x95, 0x95, 0x93, 0x93, 0x92, 0x8d, 0x89, 0x86, 0x84, 0x82, 0x83, 0x83, 0x84, 0x84, 0x81, 0x04, 0x0d, 0x16, 0x17, 0x19, 0x17, 0x14, 0x0f, 0x0c, 0x0c, 0x0b, 0x07, 0x07, 0x07, 0x08, 0x09, 0x0d, 0x0c, 0x0e, 0x09, 0x07, 0x80, 0x86, 0x8c, 0x8e, 0x8d, 0x8c, 0x86, 0x86, 0x85, 0x87, 0x87, 0x8b, 0x8b, 0x8f, 0x8e, 0x8e, 0x8c, 0x8a, 0x85, 0x86, 0x80, 0x01, 0x01, 0x00, 0x04, 0x02, 0x05, 0x01, 0x00, 0x00, 0x02, 0x01, 0x08, 0x07, 0x07, 0x03, 0x01, 0x85, 0x87, 0x89, 0x87, 0x81, 0x01, 0x09, 0x0d, 0x10, 0x0f, 0x11, 0x0f, 0x0d, 0x09, 0x08, 0x03, 0x00, 0x84, 0x84, 0x86, 0x84, 0x82, 0x80, 0x85, 0x8a, 0x94, 0x97, 0x9b, 0x99, 0x99, 0x8a, 0x83, 0x06, 0x0c, 0x11, 0x11, 0x12, 0x0e, 0x0c, 0x0d, 0x0c, 0x0d, 0x0c, 0x0a, 0x06, 0x04, 0x01, 0x82, 0x88, 0x90, 0x94, 0x94, 0x97, 0x93, 0x8d, 0x85, 0x00, 0x04, 0x03, 0x08, 0x06, 0x04, 0x01, 0x02, 0x01, 0x05, 0x05, 0x08, 0x0a, 0x0a, 0x06, 0x03, 0x83, 0x87, 0x8c, 0x90, 0x91, 0x92, 0x91, 0x8b, 0x86, 0x80, 0x03, 0x07, 0x09, 0x0a, 0x07, 0x06, 0x0b, 0x0f, 0x0e, 0x0f, 0x11, 0x12, 0x10, 0x0a, 0x04, 0x02, 0x85, 0x88, 0x8c, 0x8e, 0x8f, 0x8c, 0x8a, 0x85, 0x81, 0x01, 0x03, 0x01, 0x84, 0x87, 0x89, 0x8b, 0x8c, 0x89, 0x87, 0x00, 0x04, 0x05, 0x08, 0x0a, 0x08, 0x06, 0x03, 0x83, 0x83, 0x86, 0x83, 0x81, 0x02, 0x01, 0x06, 0x03, 0x02, 0x81, 0x80, 0x84, 0x83, 0x87, 0x85, 0x82, 0x80, 0x00, 0x05, 0x03, 0x04, 0x05, 0x04, 0x03, 0x09, 0x04, 0x07, 0x09, 0x06, 0x06, 0x06, 0x02, 0x01, 0x00, 0x85, 0x85, 0x88, 0x86, 0x86, 0x85, 0x88, 0x83, 0x85, 0x82, 0x80, 0x02, 0x01, 0x02, 0x81, 0x82, 0x84, 0x84, 0x82, 0x02, 0x02, 0x04, 0x05, 0x07, 0x03, 0x04, 0x81, 0x86, 0x8a, 0x8c, 0x8d, 0x88, 0x85, 0x81, 0x04, 0x04, 0x02, 0x03, 0x02, 0x80, 0x80, 0x80, 0x02, 0x05, 0x06, 0x09, 0x0c, 0x0c, 0x0e, 0x0c, 0x08, 0x04, 0x02, 0x82, 0x83, 0x85, 0x86, 0x86, 0x84, 0x87, 0x87, 0x86, 0x86, 0x84, 0x82, 0x83, 0x81, 0x82, 0x84, 0x82, 0x81, 0x00, 0x02, 0x03}
	//anotherThing := []byte{0x04, 0x23, 0x00, 0x97, 0x20, 0x00, 0x18, 0xec, 0x85, 0x40, 0xec, 0x89, 0x42, 0xec, 0x8d, 0x55, 0xec, 0x89, 0x42, 0xec, 0x85, 0x09, 0xf0, 0x81, 0x40, 0xf0, 0x85, 0x42, 0xf0, 0x89, 0x55, 0xf0, 0x85, 0x41, 0xf0, 0x81, 0x40, 0x18}
	// moves the head.
	//hmm := []byte{0x04, 0x04, 0x00, 0x93, 0x10, 0x02, 0xf9}
	// moves the head fast.
	//hmm2 := []byte{0x04, 0x04, 0x00, 0x93, 0x90, 0x00, 0x01}
	//hmm3 := []byte{0x04, 0x0b, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	//hmm4 := []byte{0x04, 0x05, 0x00, 0x99, 0x12, 0x00, 0xff, 0x7f}
	// hmm5 := []byte{0x04, 0x04, 0x00, 0x94, 0xe7, 0x00, 0x20}
	//hmm6 := []byte{0x04, 0x06, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00}
	//hmm7 := []byte{0x04, 0x29, 0x00, 0x04, 0xe0, 0x83, 0x00, 0x80, 0x22, 0x64, 0x04, 0x22, 0x00, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x22, 0x64, 0x04, 0x22, 0x00, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x22, 0x64, 0x04, 0x22, 0x00, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x22, 0x64, 0x04, 0x22, 0x00, 0x00}
	//hmm8 := []byte{0x04, 0x06, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00}
	//hmm9 := []byte{0x04, 0x29, 0x00, 0x04, 0xe0, 0x83, 0x00, 0x80, 0x01, 0x0d, 0x07, 0x02, 0x00, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x01, 0x0d, 0x07, 0x02, 0x04, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x01, 0x0d, 0x07, 0x02, 0x07, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x01, 0x0d, 0x07, 0x02, 0x0a, 0x00}
	//hmm7 := []byte{0x04, 0x06, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00}
	//audio , _ := hex.DecodeString("04e9028e02008102830101830384048083058403818307860280820789050186098904038806820002870884000082058481058403820003850787058084068703028707820000840784830481018181078681068503830103860400820386078704008607830100850b88010285098a04068b0a8701058b08808407890a84830686058184078602808103830100810486058182058805018808860580870a850000840b898007850180800487030181008001008305850103840382038183048180008309878309880785810b8e088182088d098185098a098185078301008407870584010688048082078b09008506880882870b870400860b858408880886800685018080058a0782800285068282058608870301860885820987048301058903048200840601890780830487088383058403818104850685000486048401048806818102880b868206870885830b8a
	c.Messages.FromUs = c.Messages.FromUs + uint16(1)
	header := c.Messages.BuildHeader(0x07, uint16(1))
	hmm12, _ := hex.DecodeString("0408005700007f40430000")
	messageBuffer := &bytes.Buffer{}
	binary.Write(messageBuffer, binary.LittleEndian, header)
	if c.a <= 5 {
		binary.Write(messageBuffer, binary.LittleEndian, hmm12)
		binary.Write(messageBuffer, binary.LittleEndian, m8f)
		binary.Write(messageBuffer, binary.LittleEndian, fourth)
		//binary.Write(messageBuffer, binary.LittleEndian, hmm2)
		binary.Write(messageBuffer, binary.LittleEndian, audio)
	}
	if c.a > 5 && c.a < 8000 {
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x02, 0x00, 0x9d, 0xff})
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x02, 0x00, 0x9d, 0x01})
		binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x0b, 0x00, 0x40, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff})

		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x0b, 0x00, 0x40, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff})
		// 00 40 slow, forward.
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x0b, 0x00, 0x40, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0})
		// 543200
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x03, 0x00, 0x54, 0x32, 0x00})
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x03, 0x00, 0x54, 0x32, 0x00})

		// 5700000000000001
		// 5700000040100000
		// 5700007f40100000
		// 5700007f401d0000
		// 5700007f40340000
		// 5700007f40430000
		// 5700007f40430000
		// 5700007f40430000
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x08, 0x00, 0x57, 0x00, 0x00, 0x7f, 0x40, 0x43, 0x00, 0x00})

		// binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x02, 0x00, 0x9b, 0x01})
		// 94e70000
		// lift goes up. veryy slow... (94000080 <-- fast).
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x04, 0x00, 0x94, 0x00, 0x00, 0x80})

		// 990000ff7f
		// forward
		// binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x05, 0x00, 0x99, 0x00, 0x00, 0xff, 0x7f})

		//3914f529be368da7c000002041c2b8b23d00000043
		// moves to a defined position. Maybe the initial pos?.
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x15, 0x00, 0x39, 0xff, 0xf5, 0x29, 0xbe, 0x36, 0x8d, 0xa7, 0xc0, 0x00, 0x00, 0x20, 0x41, 0xc2, 0xb8, 0xb2, 0x3d, 0x00, 0x00, 0x00, 0x43})

		//37 9eae9d3e(POS) 000070410000a0410000000044
		// This is moving the head, to a given position.
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x12, 0x00, 0x37, 0x00, 0x00, 0xff, 0x40, 0x00, 0x00, 0x60, 0xa0, 0xa0, 0x00, 0x30, 0xf0, 0x50, 0xf0, 0x00, 0xff, 0xff})
		//500201
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x03, 0x00, 0x50, 0x02, 0x01})

		// 81002018000004000000000000
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x0d, 0x00, 0x81,0x00, 0x20, 0x18, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
		//binary.Write(messageBuffer, binary.LittleEndian, m8f)
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x02, 0x00, 0x9b, 0x01})
		//binary.Write(messageBuffer, binary.LittleEndian, thirdGesicht)
		//binary.Write(messageBuffer, binary.LittleEndian, m8f)
		//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x01, 0x00, 0x9a})
	}
	//if a > 1 {
	//  return
	//  binary.Write(messageBuffer, binary.LittleEndian, fourth)
	//  binary.Write(messageBuffer, binary.LittleEndian, hmm2)
	//  binary.Write(messageBuffer, binary.LittleEndian, hmm6)
	//  binary.Write(messageBuffer, binary.LittleEndian, hmm7)
	//  binary.Write(messageBuffer, binary.LittleEndian, hmm8)
	// binary.Write(messageBuffer, binary.LittleEndian, hmm9)
	// binary.Write(messageBuffer, binary.LittleEndian, m8f)
	//}

	//binary.Write(messageBuffer, binary.LittleEndian, audio)
	c.a++
	//binary.Write(messageBuffer, binary.LittleEndian, m8f)
	//binary.Write(messageBuffer, binary.LittleEndian, firstGesicht)
	//binary.Write(messageBuffer, binary.LittleEndian, m8f)
	//binary.Write(messageBuffer, binary.LittleEndian, secondGesicht)
	//binary.Write(messageBuffer, binary.LittleEndian, m8f)
	//binary.Write(messageBuffer, binary.LittleEndian, thirdGesicht)
	//binary.Write(messageBuffer, binary.LittleEndian, audio)

	//binary.Write(messageBuffer, binary.LittleEndian, hmm3)

	//binary.Write(messageBuffer, binary.LittleEndian, hmm)
	//binary.Write(messageBuffer, binary.LittleEndian, hmm2)
	//binary.Write(messageBuffer, binary.LittleEndian, []byte{0x04, 0x29, 0x00, 0x04, 0xe0, 0x83, 0x00, 0x80, 0x22, 0x64, 0x04, 0x22, 0x00, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x22, 0x64, 0x04, 0x22, 0x00, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x22, 0x64, 0x04, 0x22, 0x00, 0x00, 0xe0, 0x83, 0x00, 0x80, 0x22, 0x64, 0x04, 0x22, 0x00, 0x00})
	toLeftMessage := messagetypes.Packet(messageBuffer.Bytes())

	err := binary.Write(buf, binary.LittleEndian, toLeftMessage.Bytes())
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	go c.Send(buf)
	// fmt.Println(a)
	//fmt.Println("to left")
	//fmt.Println(hex.EncodeToString(buf.Bytes()))

}
